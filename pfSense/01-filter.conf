#Built these pfSense logstash plugin because i did not find any good up to date pipeline config for the "new" raw filter log output in pfSense version 2.2:
#https://docs.netgate.com/pfsense/en/latest/monitoring/filter-log-format-for-pfsense-2-2.html
#Netgate could have this easier like including column,names for all fields
#or always using the same static fields for all type of events, but skipping the values where its not relevant.

#This filter will focus on the firewall log, have not looked on other pfSense logs.

#What this firewall filter plugin is missing so far is:
#1. IPv6 fields
#2. Conditional statement for type pfSense (if more syslogs are coming in from other devices)
#3. carp-data (CARP protocol) log type
#4. Build an elasticsearch (schema) template for the correct datatypes
#5. Go throught the field names so they match elastic common schema (https://www.elastic.co/guide/en/ecs/current/index.html)
#6. Removing the message field when we are happy with the missing parts

#But this is a working POC

#Begin by getting fields up to network.type, fields named after elastics common schema recommendations
#tmp_timestamp (parsed later), observer.syslogsource (optional), interface.name, event.reason, event.action, network.direction,network.type
filter {
  grok {
    match => {
      "message" => "^<%{INT}>%{SYSLOGTIMESTAMP:tmp_timestamp}(\s%{WORD:observer.syslogsource})? filterlog: %{INT:tmp_ruleid},%{INT:tmp_subruleid}?,%{WORD:tmp_anchor}?,%{INT:tmp_tracker}?,%{WORD:interface.name},%{WORD:event.reason},%{WORD:event.action},%{WORD:network.direction},%{INT:network.type},%{GREEDYDATA:tmp_restmess}"
    }
  }

#Based on value in network.type (4 = IPv4, 6 = IPv6), parse custom fields
#event.ttl, event.ipflags, event.protocolid, event.protocolname, network.ip4bytes, source.ip, destination.ip
  if [network.type] == "4" {
    grok {
      match => {
        "tmp_restmess" => "%{WORD:tmp_tos}?,%{WORD:tmp_ecn}?,%{INT:event.ttl}?,%{INT:tmp_packetid},%{INT:tmp_offset}?,%{WORD:event.ipflags},%{INT:event.protocolid}?,%{WORD:event.protocolname},%{WORD:network.ip4bytes},%{IP:source.ip},%{IP:destination.ip},%{GREEDYDATA:tmp_restmess2}"
      }
    }
  }
  else if [network.type] == 6 {
    #Here we parse IPv6
  }

#Based on value in event.protocolname (udp|tcp|icmp)
#udp: source.port, destination.port, event.bytes
#tcp: source.port, destination.prot, event.bytes, event.tcpflags, event.tcpwindow
#icmp: event.echotype, event.icmpid, event.icmpseq
  if [event.protocolname] == "udp" {
    grok {
      match => {
        "tmp_restmess2" => "%{INT:source.port},%{INT:destination.port},%{INT:event.bytes}"
      }
    }
  }
  else if [event.protocolname] == "tcp" {
    grok {
      match => {
        "tmp_restmess2" => "%{INT:source.port},%{INT:destination.port},%{INT:event.bytes},%{WORD:event.tcpflags},%{INT:tmp_seqid},%{INT:tmp_ackid}?,%{INT:event.tcpwindow}?,%{WORD:tmp_urg}?,%{GREEDYDATA:tcpopt}"
      }
    }
  }
  else if [event.protocolname] == "icmp" {
    grok {
      match => {
        "tmp_restmess2" => "%{WORD:event.echotype}?,%{INT:event.icmpid},%{INT:event.icmpseq}"
      }
    }
  }

#Here we remove fields (we dont want), add some extra and rename fields
  if "_grokparsefailure" not in [tags] {
    mutate {
      remove_field => [
        "tmp_ruleid",
        "tmp_subruleid",
        "tmp_anchor",
        "tmp_tracker",
        "tmp_tos",
        "tmp_ecn",
        "tmp_packetid",
        "tmp_offset",
        "tmp_seqid",
        "tmp_ackid",
        "tmp_urg",
        "tmp_restmess",
        "tmp_restmess2"
      ]
      add_field => {
        "ecs.version" => "1.1.0"
        "observer.type" => "firewall"
      }
    }
  }
}
