#Here is a logstash filter that works for us when parsing syslog messages from our Checkpoint firewall (R80.30).
#Because the firewall have several functions/products (for example IPS) the events can be completely different, not only
#by name but also number of fields. But i found a pattern that works for us in which includes most of the data betweeen [ and ].
#I add the type checkpointfirewall in the tcp input plugin, that i can pick up in the filter plugin.
#In the end i am trying to be elasticsearch common schema compliant, by adding and renaming fields to match recommendations.

filter {
  if [type] == "checkpointfirewall" {
    mutate {
      gsub => ["message", "\"",""]
      add_tag => [ "firewall" ]
    }
    grok {
      match => {
        "message" => "^<[0-9]{0,5}>[0-9]{0,2} %{TIMESTAMP_ISO8601:tmp_timestamp} %{SYSLOGHOST:syslog_hostname} [0-9a-zA-Z\s]{10,25}- \[%{GREEDYDATA:tmp_message} \]"
      }
    }
    kv {
      source => "tmp_message"
      target => "firewall"
      field_split => ";"
      value_split => ":"
      trim_key => " "
    }
    date {
      id => "firewall_parse_date"
      match => [ "tmp_timestamp", "MMM dd HH:mm:ss", "ISO8601" ]
    }

    if "_dateparsefailure" not in [tags] { mutate { remove_field => [ "tmp_timestamp" ] } }

    if "_grokparsefailure" not in [tags] and "_kvparsefailure" not in [tags] {
      mutate {
        remove_field => [ "port","type","message","tmp_message","[firewall][log_delay]","[firewall][flags]","[firewall][__policy_id_tag]","[firewall][layer_uuid]","[firewall][logid]","[firewall][loguid]","[firewall][match_id]","[firewall][parent_rule]","[firewall][rule_uid]","[firewall][time]","[firewall][version]" ]
        add_field => {
          "ecs.version" => "1.1.0"
          "observer.type" => "firewall"
        }
        rename => {
          "[firewall][origin]" => "observer.ip"
          "[firewall][product]" => "observer.product"
          "[firewall][src]" => "source.ip"
          "[firewall][s_port]" => "source.port"
          "[firewall][dst]" => "destination.ip"
          "[firewall][service]" => "destination.port"
          "[firewall][action]" => "event.action"
          "[firewall][proto]" => "network.iana_number"
          "[firewall][ifdir]" => "network.direction"
          "[firewall][service_id]" => "network.protocol"
          "[firewall][inzone]" => "firewall.srczonetype"
          "[firewall][outzone]" => "firewall.dstzonetype"
        }
      }
    }

  }
}
